import { FC } from "react";
import { DataTable } from "@/components/common/table";
import {
  createSortableColumn,
  createActionsColumn,
} from "@/components/common/table";
import { Button } from "@/components/ui/button";
import { FileText } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { ColumnDef } from "@tanstack/react-table";

// Types
type Report = {
  id: string;
  title: string;
  type: string;
  generatedBy: string;
  date: string;
  status: "ready" | "processing" | "error";
  format: string;
  size: string;
};

// Mock data for reports
const mockReports: Report[] = [
  {
    id: "REP-001",
    title: "Monthly Compliance Report",
    type: "Compliance",
    generatedBy: "System",
    date: "2024-03-16",
    status: "ready",
    format: "PDF",
    size: "2.4 MB",
  },
  {
    id: "REP-002",
    title: "Loan Validation Summary",
    type: "Validation",
    generatedBy: "Sarah Johnson",
    date: "2024-03-15",
    status: "ready",
    format: "Excel",
    size: "1.8 MB",
  },
  {
    id: "REP-003",
    title: "Quarterly Risk Assessment",
    type: "Risk Assessment",
    generatedBy: "Mike Brown",
    date: "2024-03-14",
    status: "ready",
    format: "PDF",
    size: "3.1 MB",
  },
  {
    id: "REP-004",
    title: "Loan Portfolio Analysis",
    type: "Portfolio",
    generatedBy: "System",
    date: "2024-03-13",
    status: "processing",
    format: "Excel",
    size: "0 MB",
  },
];

const ReportsPage: FC = () => {
  const generateReport = () => {
    // Create new PDF document
    const doc = new jsPDF();

    // Add title
    doc.setFontSize(20);
    doc.text("Monthly Compliance Report", 20, 20);

    // Add date
    doc.setFontSize(12);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);

    // Add summary section
    doc.setFontSize(16);
    doc.text("Summary", 20, 45);
    doc.setFontSize(12);
    doc.text(
      "This report contains a comprehensive analysis of compliance checks and validations performed during the current month.",
      20,
      55
    );

    // Add statistics
    doc.setFontSize(16);
    doc.text("Statistics", 20, 75);

    // Create table for statistics
    const statsData = [
      ["Total Loans Processed", "156"],
      ["Compliant Loans", "142"],
      ["Flagged for Review", "14"],
      ["Average Processing Time", "4.2 hours"],
      ["Approval Rate", "91%"],
    ];

    autoTable(doc, {
      startY: 85,
      head: [["Metric", "Value"]],
      body: statsData,
      theme: "grid",
      headStyles: { fillColor: [41, 128, 185] },
    });

    // Add compliance summary
    const docWithTable = doc as jsPDF & { lastAutoTable: { finalY: number } };
    doc.setFontSize(16);
    doc.text("Compliance Summary", 20, docWithTable.lastAutoTable.finalY + 20);

    doc.setFontSize(12);
    doc.text(
      "All processed loans have been reviewed for regulatory compliance including TILA, RESPA, and fair lending requirements.",
      20,
      docWithTable.lastAutoTable.finalY + 35,
      { maxWidth: 170 }
    );

    // Save the PDF
    doc.save("compliance-report.pdf");
  };

  const reportColumns: ColumnDef<Report>[] = [
    createSortableColumn("id", "Report ID"),
    createSortableColumn("title", "Title"),
    createSortableColumn("type", "Type"),
    createSortableColumn("generatedBy", "Generated By"),
    createSortableColumn("date", "Date"),
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }: { row: { getValue: (key: string) => string } }) => {
        const status = row.getValue("status");
        return (
          <Badge
            variant={
              status === "ready"
                ? "success"
                : status === "processing"
                ? "secondary"
                : "destructive"
            }
          >
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </Badge>
        );
      },
    },
    createSortableColumn("format", "Format"),
    createSortableColumn("size", "Size"),
    createActionsColumn<Report>([
      {
        label: "Download",
        onClick: (data: Report) => {
          console.log("Download report:", data.id);
          // Implement download logic
        },
      },
      {
        label: "Share",
        onClick: (data: Report) => {
          console.log("Share report:", data.id);
          // Implement share logic
        },
      },
    ]),
  ];

  // Mock statistics
  const stats = {
    totalReports: mockReports.length,
    readyReports: mockReports.filter((r) => r.status === "ready").length,
    processingReports: mockReports.filter((r) => r.status === "processing")
      .length,
    totalSize: "12.3 MB",
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Reports</h1>
          <p className="text-muted-foreground">
            Generate and manage compliance reports
          </p>
        </div>
        <div className="flex gap-2">
          <Button onClick={generateReport}>
            <FileText className="mr-2 h-4 w-4" />
            Generate Report
          </Button>
        </div>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Total Reports</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalReports}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Ready</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {stats.readyReports}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Processing</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {stats.processingReports}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Total Size</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalSize}</div>
          </CardContent>
        </Card>
      </div>

      {/* Reports Table */}
      <DataTable
        columns={reportColumns}
        data={mockReports}
        searchKey="title"
        title="Generated Reports"
        description="Access and manage compliance reports"
        filterableColumns={[
          {
            id: "type",
            title: "Report Type",
            options: [
              { label: "Compliance", value: "Compliance" },
              { label: "Validation", value: "Validation" },
              { label: "Risk Assessment", value: "Risk Assessment" },
              { label: "Portfolio", value: "Portfolio" },
            ],
          },
          {
            id: "status",
            title: "Status",
            options: [
              { label: "Ready", value: "ready" },
              { label: "Processing", value: "processing" },
              { label: "Error", value: "error" },
            ],
          },
        ]}
      />
    </div>
  );
};

export default ReportsPage;
